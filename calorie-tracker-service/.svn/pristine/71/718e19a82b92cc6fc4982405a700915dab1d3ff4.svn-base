package ca.pragmaticdev.ws.service;

import ca.pragmaticdev.ws.data.Authorization;
import ca.pragmaticdev.ws.data.AuthorizationImpl;
import ca.pragmaticdev.ws.data.User;
import ca.pragmaticdev.ws.data.mapper.UserMapper;
import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.nio.charset.Charset;

/**
 * Created by cpeterson on 16/03/16.
 */
@Service
public class AuthenticationService {

    @Autowired(required = true)
    private UserMapper userMapper;

    public ResponseEntity<Authorization> authenticate(String username, String password) {

        if(username.isEmpty() && password.isEmpty()) {
            throw new InvalidUserException();
        }

        User user = userMapper.SelectByName(username);
        if(user == null) throw new UserNotFoundException();

        String decodedPassword = new String(Base64.decodeBase64
                (password.getBytes(Charset.forName("US-ASCII"))));

        if(username.matches(decodedPassword)) {

            String authorizationString = username + ":" + password;
            String basic = new String(Base64.encodeBase64
                    (authorizationString.getBytes(Charset.forName("US-ASCII"))));

            AuthorizationImpl authorization = new AuthorizationImpl("Basic " + basic);
            return new ResponseEntity<Authorization>(authorization, HttpStatus.ACCEPTED);

        } else {
            return new ResponseEntity<Authorization>(new AuthorizationImpl(null), HttpStatus.UNAUTHORIZED);
        }

    }
}
