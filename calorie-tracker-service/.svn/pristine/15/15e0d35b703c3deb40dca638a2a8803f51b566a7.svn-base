package ca.pragmaticdev.ws.service;


import ca.pragmaticdev.ws.data.*;
import ca.pragmaticdev.ws.data.mapper.DailyIntakeMapper;
import ca.pragmaticdev.ws.data.mapper.RegistrationInfoMapper;
import ca.pragmaticdev.ws.data.mapper.ServingMapper;
import ca.pragmaticdev.ws.data.mapper.UserMapper;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class UserService {

    protected static Logger logger = Logger.getLogger(UserService.class);

    @Autowired(required = true)
    private DailyIntakeMapper dailyIntakeMapper;

    @Autowired(required = true)
    private ServingMapper servingMapper;

    @Autowired(required = true)
    private RegistrationInfoMapper registrationInfoMapper;

    @Autowired(required = true)
    private UserMapper userMapper;

    public List<User> selectAll() {

        List<User> returnedUsers = new ArrayList<User>();
        List<User> users = userMapper.SelectAll();

        for(User user : users) {
            User returnedUser = select(user.getUserId(),10);
            returnedUsers.add(returnedUser);
        }
        return returnedUsers;
    }

    public User select(Long id, int dailyIntakeLimit) {

        User user = userMapper.SelectById(id);
        if(user == null) throw new UserNotFoundException();

        RegistrationInfo registrationInfo = registrationInfoMapper.SelectById(user.getUserId());
        user.setRegistrationInfo(registrationInfo);
        if(registrationInfo == null) throw new RegistrationInfoNotFoundException();

        List<DailyIntake> dailyIntakeList = dailyIntakeMapper.SelectByUserId(user.getUserId());
        //It is expected that the DailyIntake array may not be populated.
        if(dailyIntakeList == null || dailyIntakeList.size() == 0) {
            //Create an empty dailyIntake array instead of removing it.
            user.setDailyIntakeList(new ArrayList<DailyIntake>());
        } else {

            for (DailyIntake dailyIntake : dailyIntakeList) {
                List<Serving> servingList = servingMapper.SelectByDailyIntakeId(dailyIntake.getDailyIntakeId());
                if (servingList == null || servingList.size() == 0) throw new ServingNotFoundException();
                dailyIntake.setServingList(servingList);
            }
            user.setDailyIntakeList(dailyIntakeList);
        }

        return user;
    }

    public UserImpl deserializeJsonString(String jsonString) {

        ObjectMapper mapper = new ObjectMapper();
        UserImpl user = new UserImpl();
        try {
            return mapper.readValue(jsonString, UserImpl.class);

        } catch (JsonParseException e) {
            logger.error(e.getMessage(),e);

        } catch (JsonMappingException e) {
            logger.error(e.getMessage(),e);

        } catch (IOException e) {
            logger.error(e.getMessage(),e);

        }

        return null;
    }

    public void insert(User user) {

        //There must be a user and registrationInfo object before it is inserted, but dailyIntake and servings
        //may be missing if is an initial insert.
        if(user == null) throw new UserNotFoundException();

        RegistrationInfo registrationInfo = user.getRegistrationInfo();
        if(registrationInfo == null) throw new RegistrationInfoNotFoundException();

        //The inserted user should not exist in the database otherwise abort.
        User selectedUser = userMapper.SelectById(user.getUserId());

        if(selectedUser == null) {
            user.setActive(1);
            userMapper.Insert(user);
            //RegistrationInfo.userId is not required in the json object so have to copy it from User.userId.
            registrationInfo.setUserId(user.getUserId());
            registrationInfo.setActive(1);
            registrationInfoMapper.Insert(registrationInfo);

            List<DailyIntake> dailyIntakeList = user.getDailyIntakeList();
            if (dailyIntakeList != null && dailyIntakeList.size() > 0) {
                for (DailyIntake dailyIntake : user.getDailyIntakeList()) {
                    dailyIntakeMapper.Insert(dailyIntake);

                    List<Serving> servingList = dailyIntake.getServingList();
                    if (dailyIntakeList.size() > 0) {
                        for (Serving serving : servingList) {
                            servingMapper.Insert(serving);
                        }
                    }
                }
            }
        } else {
            throw new UserAlreadyExistsException();
        }
    }

    public void update(User user) {

        if(user == null) throw new UserNotFoundException();
        userMapper.Update(user);

        RegistrationInfo registrationInfo = user.getRegistrationInfo();
        if(registrationInfo == null) throw new RegistrationInfoNotFoundException();
        registrationInfoMapper.Update(registrationInfo);

        List<DailyIntake> dailyIntakeList = user.getDailyIntakeList();
        if(dailyIntakeList.size() > 0) {
            for (DailyIntake dailyIntake : dailyIntakeList) {
                dailyIntakeMapper.Update(dailyIntake);

                List<Serving> servingList = dailyIntake.getServingList();
                if (dailyIntakeList.size() > 0) {
                    for (Serving serving : servingList) {
                        servingMapper.Update(serving);
                    }
                }
            }
        }
    };

    public void remove(Long id) {

        User user = userMapper.SelectById(id);

        if(user != null) {
            userMapper.Remove(id);
            registrationInfoMapper.Remove(user.getUserId());

            List<DailyIntake> dailyIntakeList = user.getDailyIntakeList();
            if (dailyIntakeList != null && dailyIntakeList.size() > 0) {
                for (DailyIntake dailyIntake : dailyIntakeList) {
                    dailyIntakeMapper.Remove(dailyIntake.getDailyIntakeId());

                    for (Serving serving : dailyIntake.getServingList()) {
                        servingMapper.Remove(serving.getDailyIntakeId());
                    }
                }
            }
        }
    }

    public Boolean isUserExist(Long userId) {

        User existingUser = userMapper.SelectById(userId);
        return existingUser != null;
    }

    public void setDailyIntakeMapper(DailyIntakeMapper dailyIntakeMapper) {
        this.dailyIntakeMapper = dailyIntakeMapper;
    }

    public void setServingMapper(ServingMapper servingMapper) {
        this.servingMapper = servingMapper;
    }

    public void setRegistrationInfoMapper(RegistrationInfoMapper registrationInfoMapper) {
        this.registrationInfoMapper = registrationInfoMapper;
    }

    public void setUserMapper(UserMapper userMapper) {
        this.userMapper = userMapper;
    }



   /* private Response convertListToJson(UserImpl user) {

        ObjectMapper mapper = new ObjectMapper();
        String json;
        try {
            json = mapper.writeValueAsString(user);
        } catch (JsonProcessingException e) {
            logger.error(e);
            return getServerErrorResponse(e.getStackTrace().toString());
        }

        return getOkResponse(json);
    }

    private Response getServerErrorResponse(String exception) {
        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(exception).build();
    }

    //Reference: http://stackoverflow.com/questions/23450494/how-to-enable-cross-domain-requests-on-jax-rs-web-services
    private Response getOkResponse(String json) {
        return Response.
                ok(json, MediaType.APPLICATION_JSON)
                .header("Access-Control-Allow-Origin", "*")
                .header("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
                .header("Access-Control-Allow-Credentials", "true")
                .header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD")
                .header("Access-Control-Max-Age", "1209600")
                .build();
    }*/
}
