<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="HomeAutomation" id="dce253a6-1f06-4a3a-8afe-2b492094c9b0" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.reportFolder" type="java.lang.String"/><con:property propagates="true" key="ModelItem.reportFormat" type="java.lang.String"/><con:property propagates="true" key="ProjectItem.statisticNumberOfAutosaves" type="java.lang.Long">5</con:property></con:properties><con:attributes><con:property key="miniature">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
</con:property><con:property key="limits">Time=600;</con:property></con:attributes><con:addons/><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="831128e4-4497-4ec0-9b35-4bfc792f9fe9"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">C:\projects\code\src\java\ssts\SpringWorkspace\home-automation-service\src\main\docs\home-automation-soapui-project.xml</con:property><con:property propagates="false" key="projectRelativePath" type="java.lang.String">home-automation-soapui-project.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Curtis\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="false" key="projectFile" type="java.io.File">C:\projects\code\src\java\ssts\SpringWorkspace\home-automation-service\src\main\docs\home-automation-soapui-project.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">Home-Automation-TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">setTemperature-ShouldReturnSuccess</con:property><con:property propagates="true" key="_valueToOverride_Temperature" type="java.lang.String">24</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">572</con:property><con:property key="gui.layoutY">184</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="1ea54ed5-6279-4b4f-9915-5c97f2f3df91" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.TimeUnit

//Properties
createProperty( 'rate', Long, 10 ) { schedule() }
createProperty( 'unit', String, 'Sec' ) { schedule() }

onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

createProperty( 'burstSize', Long, 1 )

triggerBurst = { 
	burstSize.value.times {
		trigger() 
	} 
}

future = null
schedule = {
	if( stateProperty.value ) {
		long microsecondsPerUnit = unit.value == 'Sec' ? 1000000 : unit.value == 'Min' ? 60000000 : 3600000000
		long delay = Math.max( 1, (long)(microsecondsPerUnit / rate.value) )
		future?.cancel( true )
		future = scheduleAtFixedRate( triggerBurst, delay, delay, TimeUnit.MICROSECONDS )
	}
}

onAction( "START" ) { schedule() }
onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label: 'Burst size' ) 
}

if( running ) schedule()</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">10</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">1b4bbbfc208dde91cb69b66178ff7746</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">267</con:property><con:property key="gui.layoutY">173</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Results" id="1cf964ef-1e7f-473d-b603-cf6cdeb16587" category="output"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @id com.eviware.TableLog
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.3
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import java.io.FileOutputStream
import java.io.FileInputStream
import com.eviware.loadui.api.events.ActionEvent
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent
import java.text.SimpleDateFormat

import com.eviware.loadui.api.summary.MutableSection

inputTerminal.description = 'Messages sent here will be displayed in the table.'
likes( inputTerminal ) { true }

createProperty( 'maxRows', Long, 1000 ) { value ->
	myTableModel.maxRow = value
}
createProperty 'logFilePath', String
createProperty 'saveFile', Boolean, false
createProperty( 'follow', Boolean, false ) { value ->
	if( myTableModel.follow != value as Boolean ) myTableModel.follow = value
}
createProperty( 'enabledInDistMode', Boolean, false ) { value ->
	if( myTableModel.enabledInDistMode != value as Boolean ) myTableModel.enabledInDistMode = value
}
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false
createProperty 'formatTimestamps', Boolean, true
createProperty 'addHeaders', Boolean, false

def latestHeader

myTableModel = new LTableModel(1000, follow.value as Boolean, enabledInDistMode.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateProperties()
	}
});

String saveFileName = null

writer = null
def formater = new SimpleDateFormat( "HH:mm:ss:SSS" )
myTableModel.maxRow = maxRows.value

updateProperties = {
	follow.value = myTableModel.follow
	enabledInDistMode.value = myTableModel.enabledInDistMode
}

onMessage = { o, i, m ->
	if( controller && i == remoteTerminal ) {
		//controller received message from agent
		m["Source"] = o.label
		output( m )
	}
}

output = { message ->
	def writeLog = saveFile.value && saveFileName
	if( controller || writeLog ) {
		message.keySet().each { k -> myTableModel.addColumn( k ) }
		lastMsgDate = new Date();
		
		if ( formatTimestamps.value ) {
			message.each() { key, value ->
				if ( key.toLowerCase().contains("timestamp") ) {
					try {
						message[key] = formater.format( new Date( value ) )
					} catch ( IllegalArgumentException e ) {
						log.info( "Failed to format Timestamp in a column whose name hinted about it containing a Timestamp" )
					}
				}
			}
		}

		result = myTableModel.addRow( message )
		if( writeLog && result ) {
			if( writer == null ) {
				writer = new CSVWriter( new FileWriter( saveFileName, appendSaveFile.value ), (char) ',' );
			}
			try {
				String[] header = myTableModel.header
				if( addHeaders.value && !Arrays.equals( latestHeader, header ) ) {
					writer.writeNext( header )
					latestHeader = header
				}
				String[] entries = myTableModel.lastRow
				writer.writeNext( entries )
			} catch ( Exception e ) {
				log.error( "Error writing to log file", e )
			}
		}
	}
	
	if( ! controller && myTableModel.enabledInDistMode ) {
		// on agent and enabled, so send message to controller
		send( controllerTerminal, message )
	}
}

onAction( "START" ) { buildFileName() }

onAction( "COMPLETE" ) {
	writer?.close()
	writer = null
}

onAction( "RESET" ) {
	myTableModel.reset()
	buildFileName()
}

onRelease = {
	writer?.close()
}

buildFileName = {
	if( !saveFile.value ) {
		writer?.close()
		writer = null
		return
	}
	if( writer != null ) {
		return
	}
	def filePath = "${getBaseLogDir()}${File.separator}${logFilePath.value}"
	if( !validateLogFilePath( filePath ) ) {
		filePath = "${getBaseLogDir()}${File.separator}logs${File.separator}table-log${File.separator}${getDefaultLogFileName()}"
		log.warn( "Log file path wasn't specified properly. Try default path: [$filePath]" )
		if( !validateLogFilePath( filePath ) ) {
			log.error("Path: [$filePath] can't be used either. Table log component name contains invalid characters. Log file won't be saved.")
			saveFileName = null
			return
		}
	}
	if( !appendSaveFile.value ) {
		def f = new File( filePath )
		filePath = "${f.parent}${File.separator}${addTimestampToFileName( f.name )}"
	}
	new File( filePath ).parentFile.mkdirs()
	saveFileName = filePath
}

getBaseLogDir = {
	def dir = System.getProperty("loadui.home")
	if(dir == null || dir.trim().length() == 0) {
		dir = "."
	}
	return dir
}
				
getDefaultLogFileName = {
	return getLabel().replaceAll( " ","" )
}
				
validateLogFilePath = { filePath ->
	try {
		// the only good way to check if file path 
		// is correct is to try read and writing
		def temp = new File( filePath )
		temp.parentFile.mkdirs()
		if( !temp.exists() ) {
			def fos = new FileOutputStream( temp )
			fos.write( [0] )
			fos.close()
			temp.delete()
		} else {
			def fis = new FileInputStream( temp )
			fis.read()
			fis.close()
		}
		return true
	}
	catch( Exception e ) {
		return false
	}	
}

addTimestampToFileName = { name ->
	def ext = ""
	def ind = name.lastIndexOf( "." )
	if( ind > -1 ){
		ext = name.substring( ind, name.length() )
		name = name.substring( 0, ind )
	}
	def timestamp = new Date().time
	if( name.length() > 0 ) {
		name = "${name}-"
	}
	return "$name$timestamp$ext"
}

layout { 
	node( widget: 'tableWidget', model: myTableModel ) 
}

compactLayout {
	box( widget: 'display' ) {
		node( label: 'Rows', content: { myTableModel.rowCount } )
		node( label: 'Output File', content: { saveFileName ?: '-' } )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: logFilePath, label: 'Log File (Comma separated, relative to loadUI home dir)' )
		property(property: appendSaveFile, label: 'Check to append selected file', )
		property(property: formatTimestamps, label: 'Check to format timestamps(hh:mm:ss:ms)')
		property(property: addHeaders, label: 'Check to add headers to a file')
		label('(If not appending file, its name will be used to generate new log files each time test is run.)')
	}
}

generateSummary = { chapter ->
	if( summaryRows.value > 0 ) {
   	MutableSection sect = chapter.addSection( getLabel() )
   	sect.addTable( getLabel(), myTableModel.getLastRows( summaryRows.value ) )
   }
}]]></con:property><con:property propagates="true" key="maxRows" type="java.lang.Long">1000</con:property><con:property propagates="true" key="logFilePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="saveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="follow" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="enabledInDistMode" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="summaryRows" type="java.lang.Long">0</con:property><con:property propagates="true" key="appendSaveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="formatTimestamps" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="addHeaders" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_digest">44189d46421215564842db4cc0c933fd</con:property><con:property key="_id">com.eviware.TableLog</con:property><con:property key="_classLoader">com.eviware.TableLog</con:property><con:property key="gui.layoutX">190</con:property><con:property key="gui.layoutY">535</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Currently Running" id="75f1b9ee-1e48-4f0c-87ec-4a5a94b932e8" category="output"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @id com.eviware.TableLog
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.3
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import java.io.FileOutputStream
import java.io.FileInputStream
import com.eviware.loadui.api.events.ActionEvent
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent
import java.text.SimpleDateFormat

import com.eviware.loadui.api.summary.MutableSection

inputTerminal.description = 'Messages sent here will be displayed in the table.'
likes( inputTerminal ) { true }

createProperty( 'maxRows', Long, 1000 ) { value ->
	myTableModel.maxRow = value
}
createProperty 'logFilePath', String
createProperty 'saveFile', Boolean, false
createProperty( 'follow', Boolean, false ) { value ->
	if( myTableModel.follow != value as Boolean ) myTableModel.follow = value
}
createProperty( 'enabledInDistMode', Boolean, false ) { value ->
	if( myTableModel.enabledInDistMode != value as Boolean ) myTableModel.enabledInDistMode = value
}
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false
createProperty 'formatTimestamps', Boolean, true
createProperty 'addHeaders', Boolean, false

def latestHeader

myTableModel = new LTableModel(1000, follow.value as Boolean, enabledInDistMode.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateProperties()
	}
});

String saveFileName = null

writer = null
def formater = new SimpleDateFormat( "HH:mm:ss:SSS" )
myTableModel.maxRow = maxRows.value

updateProperties = {
	follow.value = myTableModel.follow
	enabledInDistMode.value = myTableModel.enabledInDistMode
}

onMessage = { o, i, m ->
	if( controller && i == remoteTerminal ) {
		//controller received message from agent
		m["Source"] = o.label
		output( m )
	}
}

output = { message ->
	def writeLog = saveFile.value && saveFileName
	if( controller || writeLog ) {
		message.keySet().each { k -> myTableModel.addColumn( k ) }
		lastMsgDate = new Date();
		
		if ( formatTimestamps.value ) {
			message.each() { key, value ->
				if ( key.toLowerCase().contains("timestamp") ) {
					try {
						message[key] = formater.format( new Date( value ) )
					} catch ( IllegalArgumentException e ) {
						log.info( "Failed to format Timestamp in a column whose name hinted about it containing a Timestamp" )
					}
				}
			}
		}

		result = myTableModel.addRow( message )
		if( writeLog && result ) {
			if( writer == null ) {
				writer = new CSVWriter( new FileWriter( saveFileName, appendSaveFile.value ), (char) ',' );
			}
			try {
				String[] header = myTableModel.header
				if( addHeaders.value && !Arrays.equals( latestHeader, header ) ) {
					writer.writeNext( header )
					latestHeader = header
				}
				String[] entries = myTableModel.lastRow
				writer.writeNext( entries )
			} catch ( Exception e ) {
				log.error( "Error writing to log file", e )
			}
		}
	}
	
	if( ! controller && myTableModel.enabledInDistMode ) {
		// on agent and enabled, so send message to controller
		send( controllerTerminal, message )
	}
}

onAction( "START" ) { buildFileName() }

onAction( "COMPLETE" ) {
	writer?.close()
	writer = null
}

onAction( "RESET" ) {
	myTableModel.reset()
	buildFileName()
}

onRelease = {
	writer?.close()
}

buildFileName = {
	if( !saveFile.value ) {
		writer?.close()
		writer = null
		return
	}
	if( writer != null ) {
		return
	}
	def filePath = "${getBaseLogDir()}${File.separator}${logFilePath.value}"
	if( !validateLogFilePath( filePath ) ) {
		filePath = "${getBaseLogDir()}${File.separator}logs${File.separator}table-log${File.separator}${getDefaultLogFileName()}"
		log.warn( "Log file path wasn't specified properly. Try default path: [$filePath]" )
		if( !validateLogFilePath( filePath ) ) {
			log.error("Path: [$filePath] can't be used either. Table log component name contains invalid characters. Log file won't be saved.")
			saveFileName = null
			return
		}
	}
	if( !appendSaveFile.value ) {
		def f = new File( filePath )
		filePath = "${f.parent}${File.separator}${addTimestampToFileName( f.name )}"
	}
	new File( filePath ).parentFile.mkdirs()
	saveFileName = filePath
}

getBaseLogDir = {
	def dir = System.getProperty("loadui.home")
	if(dir == null || dir.trim().length() == 0) {
		dir = "."
	}
	return dir
}
				
getDefaultLogFileName = {
	return getLabel().replaceAll( " ","" )
}
				
validateLogFilePath = { filePath ->
	try {
		// the only good way to check if file path 
		// is correct is to try read and writing
		def temp = new File( filePath )
		temp.parentFile.mkdirs()
		if( !temp.exists() ) {
			def fos = new FileOutputStream( temp )
			fos.write( [0] )
			fos.close()
			temp.delete()
		} else {
			def fis = new FileInputStream( temp )
			fis.read()
			fis.close()
		}
		return true
	}
	catch( Exception e ) {
		return false
	}	
}

addTimestampToFileName = { name ->
	def ext = ""
	def ind = name.lastIndexOf( "." )
	if( ind > -1 ){
		ext = name.substring( ind, name.length() )
		name = name.substring( 0, ind )
	}
	def timestamp = new Date().time
	if( name.length() > 0 ) {
		name = "${name}-"
	}
	return "$name$timestamp$ext"
}

layout { 
	node( widget: 'tableWidget', model: myTableModel ) 
}

compactLayout {
	box( widget: 'display' ) {
		node( label: 'Rows', content: { myTableModel.rowCount } )
		node( label: 'Output File', content: { saveFileName ?: '-' } )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: logFilePath, label: 'Log File (Comma separated, relative to loadUI home dir)' )
		property(property: appendSaveFile, label: 'Check to append selected file', )
		property(property: formatTimestamps, label: 'Check to format timestamps(hh:mm:ss:ms)')
		property(property: addHeaders, label: 'Check to add headers to a file')
		label('(If not appending file, its name will be used to generate new log files each time test is run.)')
	}
}

generateSummary = { chapter ->
	if( summaryRows.value > 0 ) {
   	MutableSection sect = chapter.addSection( getLabel() )
   	sect.addTable( getLabel(), myTableModel.getLastRows( summaryRows.value ) )
   }
}]]></con:property><con:property propagates="true" key="maxRows" type="java.lang.Long">1000</con:property><con:property propagates="true" key="logFilePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="saveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="follow" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="enabledInDistMode" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="summaryRows" type="java.lang.Long">0</con:property><con:property propagates="true" key="appendSaveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="formatTimestamps" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="addHeaders" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_digest">44189d46421215564842db4cc0c933fd</con:property><con:property key="_id">com.eviware.TableLog</con:property><con:property key="_classLoader">com.eviware.TableLog</con:property><con:property key="gui.layoutX">883</con:property><con:property key="gui.layoutY">543</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Errors" id="1d2192ff-8c7e-4b86-b2d9-1a7d93ced794" category="output"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @id com.eviware.TableLog
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.3
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import java.io.FileOutputStream
import java.io.FileInputStream
import com.eviware.loadui.api.events.ActionEvent
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent
import java.text.SimpleDateFormat

import com.eviware.loadui.api.summary.MutableSection

inputTerminal.description = 'Messages sent here will be displayed in the table.'
likes( inputTerminal ) { true }

createProperty( 'maxRows', Long, 1000 ) { value ->
	myTableModel.maxRow = value
}
createProperty 'logFilePath', String
createProperty 'saveFile', Boolean, false
createProperty( 'follow', Boolean, false ) { value ->
	if( myTableModel.follow != value as Boolean ) myTableModel.follow = value
}
createProperty( 'enabledInDistMode', Boolean, false ) { value ->
	if( myTableModel.enabledInDistMode != value as Boolean ) myTableModel.enabledInDistMode = value
}
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false
createProperty 'formatTimestamps', Boolean, true
createProperty 'addHeaders', Boolean, false

def latestHeader

myTableModel = new LTableModel(1000, follow.value as Boolean, enabledInDistMode.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateProperties()
	}
});

String saveFileName = null

writer = null
def formater = new SimpleDateFormat( "HH:mm:ss:SSS" )
myTableModel.maxRow = maxRows.value

updateProperties = {
	follow.value = myTableModel.follow
	enabledInDistMode.value = myTableModel.enabledInDistMode
}

onMessage = { o, i, m ->
	if( controller && i == remoteTerminal ) {
		//controller received message from agent
		m["Source"] = o.label
		output( m )
	}
}

output = { message ->
	def writeLog = saveFile.value && saveFileName
	if( controller || writeLog ) {
		message.keySet().each { k -> myTableModel.addColumn( k ) }
		lastMsgDate = new Date();
		
		if ( formatTimestamps.value ) {
			message.each() { key, value ->
				if ( key.toLowerCase().contains("timestamp") ) {
					try {
						message[key] = formater.format( new Date( value ) )
					} catch ( IllegalArgumentException e ) {
						log.info( "Failed to format Timestamp in a column whose name hinted about it containing a Timestamp" )
					}
				}
			}
		}

		result = myTableModel.addRow( message )
		if( writeLog && result ) {
			if( writer == null ) {
				writer = new CSVWriter( new FileWriter( saveFileName, appendSaveFile.value ), (char) ',' );
			}
			try {
				String[] header = myTableModel.header
				if( addHeaders.value && !Arrays.equals( latestHeader, header ) ) {
					writer.writeNext( header )
					latestHeader = header
				}
				String[] entries = myTableModel.lastRow
				writer.writeNext( entries )
			} catch ( Exception e ) {
				log.error( "Error writing to log file", e )
			}
		}
	}
	
	if( ! controller && myTableModel.enabledInDistMode ) {
		// on agent and enabled, so send message to controller
		send( controllerTerminal, message )
	}
}

onAction( "START" ) { buildFileName() }

onAction( "COMPLETE" ) {
	writer?.close()
	writer = null
}

onAction( "RESET" ) {
	myTableModel.reset()
	buildFileName()
}

onRelease = {
	writer?.close()
}

buildFileName = {
	if( !saveFile.value ) {
		writer?.close()
		writer = null
		return
	}
	if( writer != null ) {
		return
	}
	def filePath = "${getBaseLogDir()}${File.separator}${logFilePath.value}"
	if( !validateLogFilePath( filePath ) ) {
		filePath = "${getBaseLogDir()}${File.separator}logs${File.separator}table-log${File.separator}${getDefaultLogFileName()}"
		log.warn( "Log file path wasn't specified properly. Try default path: [$filePath]" )
		if( !validateLogFilePath( filePath ) ) {
			log.error("Path: [$filePath] can't be used either. Table log component name contains invalid characters. Log file won't be saved.")
			saveFileName = null
			return
		}
	}
	if( !appendSaveFile.value ) {
		def f = new File( filePath )
		filePath = "${f.parent}${File.separator}${addTimestampToFileName( f.name )}"
	}
	new File( filePath ).parentFile.mkdirs()
	saveFileName = filePath
}

getBaseLogDir = {
	def dir = System.getProperty("loadui.home")
	if(dir == null || dir.trim().length() == 0) {
		dir = "."
	}
	return dir
}
				
getDefaultLogFileName = {
	return getLabel().replaceAll( " ","" )
}
				
validateLogFilePath = { filePath ->
	try {
		// the only good way to check if file path 
		// is correct is to try read and writing
		def temp = new File( filePath )
		temp.parentFile.mkdirs()
		if( !temp.exists() ) {
			def fos = new FileOutputStream( temp )
			fos.write( [0] )
			fos.close()
			temp.delete()
		} else {
			def fis = new FileInputStream( temp )
			fis.read()
			fis.close()
		}
		return true
	}
	catch( Exception e ) {
		return false
	}	
}

addTimestampToFileName = { name ->
	def ext = ""
	def ind = name.lastIndexOf( "." )
	if( ind > -1 ){
		ext = name.substring( ind, name.length() )
		name = name.substring( 0, ind )
	}
	def timestamp = new Date().time
	if( name.length() > 0 ) {
		name = "${name}-"
	}
	return "$name$timestamp$ext"
}

layout { 
	node( widget: 'tableWidget', model: myTableModel ) 
}

compactLayout {
	box( widget: 'display' ) {
		node( label: 'Rows', content: { myTableModel.rowCount } )
		node( label: 'Output File', content: { saveFileName ?: '-' } )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: logFilePath, label: 'Log File (Comma separated, relative to loadUI home dir)' )
		property(property: appendSaveFile, label: 'Check to append selected file', )
		property(property: formatTimestamps, label: 'Check to format timestamps(hh:mm:ss:ms)')
		property(property: addHeaders, label: 'Check to add headers to a file')
		label('(If not appending file, its name will be used to generate new log files each time test is run.)')
	}
}

generateSummary = { chapter ->
	if( summaryRows.value > 0 ) {
   	MutableSection sect = chapter.addSection( getLabel() )
   	sect.addTable( getLabel(), myTableModel.getLastRows( summaryRows.value ) )
   }
}]]></con:property><con:property propagates="true" key="maxRows" type="java.lang.Long">1000</con:property><con:property propagates="true" key="logFilePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="saveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="follow" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="enabledInDistMode" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="summaryRows" type="java.lang.Long">0</con:property><con:property propagates="true" key="appendSaveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="formatTimestamps" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="addHeaders" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_digest">44189d46421215564842db4cc0c933fd</con:property><con:property key="_id">com.eviware.TableLog</con:property><con:property key="_classLoader">com.eviware.TableLog</con:property><con:property key="gui.layoutX">1234</con:property><con:property key="gui.layoutY">184</con:property></con:attributes><con:addons/></con:component><con:connection outputTerminalId="1ea54ed5-6279-4b4f-9915-5c97f2f3df91/triggerTerminal" inputTerminalId="831128e4-4497-4ec0-9b35-4bfc792f9fe9/triggerTerminal"/><con:connection outputTerminalId="831128e4-4497-4ec0-9b35-4bfc792f9fe9/resultTerminal" inputTerminalId="1cf964ef-1e7f-473d-b603-cf6cdeb16587/inputTerminal"/><con:connection outputTerminalId="831128e4-4497-4ec0-9b35-4bfc792f9fe9/runningTerminal" inputTerminalId="75f1b9ee-1e48-4f0c-87ec-4a5a94b932e8/inputTerminal"/><con:connection outputTerminalId="831128e4-4497-4ec0-9b35-4bfc792f9fe9/samplerErrors" inputTerminalId="1d2192ff-8c7e-4b86-b2d9-1a7d93ced794/inputTerminal"/><con:statistics><con:page title="General"/></con:statistics></con:loadui-project>